
package sample.one;



`This is a sample class.`
details( `It does some interesting stuff.
          Like show how to display code.` )
class Sample2(
    `The first input field of the class. It's private.`
    a : String,
    `Another input field. It's public and mutable - bad.`
    b : Int32 : public : mutable
) : Example( a ) & AnInterface & AnotherInterface {

  delegate inner : AnInterface = AnImplementation( this.a );

  state s : MyState;

  "The first method of the class."
  function m1(
    `It takes one input.`
    x : String
  ) {

  }

}

class Sample2(
    a : String : `The first input field of the class. It's private.`,
    b : Int32 : public : mutable : `Another input field. It's public and mutable - bad.`
) : Example( a ) & AnInterface & AnotherInterface
  : `This is a sample class.`
  : details( `It does some interesting stuff.
              Like show how to display code.` )
{

  delegate inner : AnInterface = AnImplementation( a );

  state s : MyState;

  function m1(
    x : String : `It takes one input.`
  ) : "The first method of the class."
  {

  }

}

